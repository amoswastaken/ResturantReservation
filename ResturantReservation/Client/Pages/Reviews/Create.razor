@page "/reviews/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Reviews</h3>
<hr />
<br />

<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="review.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@($"{customer.FirstName} {customer.LastName}")</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.CustomerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Score: </label>
        <div>
            <InputNumber @bind-Value="@review.Score" class="form-control" />
            <ValidationMessage For="@(() => review.Score)" />
        </div>
    </div>
    <br />
    <div class="form-group">
        <label>Content: </label>
        <div>
            <InputText @bind-Value="@review.Content" class="form-control" />
            <ValidationMessage For="@(() => review.Content)" />
        </div>
    </div>
    <br />
    <div class="form-group">
        <label>Restaurant Name: </label>
        <div>
            <InputSelect @bind-Value="review.RestaurantId" class="form-control">
                <option value="">-- Select Restaurant --</option>
                @if (Restaurants != null)
                {
                    foreach (var restaurant in Restaurants)
                    {
                        <option value="@restaurant.Id">@($"{restaurant.Name} - {restaurant.Address}")</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.RestaurantId)" />
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-success btn-block">
        Create Review
    </button>
    <BackToList Target="reviews" />
</EditForm>

@code {
    Review review = new Review();

    private IList<Restaurant>? Restaurants;
    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
        _navManager.NavigateTo("/reviews");
    }
}